{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","reverse","setReverse","NONE","sortType","setSortType","goods","visibleGoods","sort","good1","good2","ALPABET","localeCompare","LENGTH","length","getReorderedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAqCE,IAAME,EAAgB,WAC3B,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EA9BD,SACLA,EADK,GAGJ,IADCF,EACF,EADEA,SAAUH,EACZ,EADYA,QAENM,EAAY,YAAOD,GAmBzB,OAjBAC,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQN,GACN,KAAKP,EAASc,QACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKb,EAASgB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAOjB,EAASM,SAIlBF,GACFM,EAAaN,UAGRM,EAOOQ,CAAkBjB,EAAiB,CAAEM,WAAUH,YAE7D,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CACE,WAAYd,IAAaP,EAASc,UAGtCQ,QAAS,kBAAMd,EAAYR,EAASc,UARtC,iCAaA,wBACEM,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,WAAYd,IAAaP,EAASgB,SAGtCM,QAAS,kBAAMd,EAAYR,EAASgB,SARtC,4BAaA,wBACEI,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,YAAajB,IAGjBkB,QAAS,kBAAMjB,GAAYD,IAR7B,uBAac,IAAZA,GAAqBG,IAAaP,EAASM,OAC3C,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPjB,GAAW,GACXG,EAAYR,EAASM,OALzB,sBAaJ,6BACGG,EAAMc,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YCpHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.9cdcb545.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  reverse: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, reverse }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.ALPABET:\n        return good1.localeCompare(good2);\n\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n\n      default:\n        return SortType.NONE;\n    }\n  });\n\n  if (reverse) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [reverse, setReverse] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const goods = getReorderedGoods(goodsFromServer, { sortType, reverse });\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            {\n              'is-light': sortType !== SortType.ALPABET,\n            },\n          )}\n          onClick={() => setSortType(SortType.ALPABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            {\n              'is-light': sortType !== SortType.LENGTH,\n            },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            {\n              'is-light': !reverse,\n            },\n          )}\n          onClick={() => setReverse(!reverse)}\n        >\n          Reverse\n        </button>\n\n        {(reverse !== false || sortType !== SortType.NONE) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setReverse(false);\n              setSortType(SortType.NONE);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}